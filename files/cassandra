#!/bin/sh

CASSANDRA_HOME=/opt/cassandra
CASSANDRA_USER=root
CASSANDRA_SCRIPT=$CASSANDRA_HOME/bin/cassandra
CASSANDRA_CONSOLE_LOG=/var/cassandra/log/console.log

PATH=/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin

prog=cassandra
DESC="cassandra daemon"

RETVAL=0
STARTUP_WAIT=120
SHUTDOWN_WAIT=60

CASSANDRA_PIDFILE=/var/cassandra/run/cassandra.pid


# Source function library.
. /etc/init.d/functions

start() {
  echo -n $"Starting $prog: "

        # Create pid file
        if [ -f $CASSANDRA_PIDFILE ]; then
                read ppid < $CASSANDRA_PIDFILE
                if [ `ps --pid $ppid 2> /dev/null | grep -c $ppid 2> /dev/null` -eq '1' ]; then
                        echo -n "$prog is already running"
                        failure
                        echo
                        return 1
                else
                      rm -f $CASSANDRA_PIDFILE
                fi
        fi

        rm -f $CASSANDRA_CONSOLE_LOG
		mkdir -p $(dirname $CASSANDRA_CONSOLE_LOG)
		chown $CASSANDRA_USER $(dirname $CASSANDRA_CONSOLE_LOG) || true
        mkdir -p $(dirname $CASSANDRA_PIDFILE)
        chown $CASSANDRA_USER $(dirname $CASSANDRA_PIDFILE) || true
		  
        # Run daemon
        cd $CASSANDRA_HOME
        nohup sh $CASSANDRA_SCRIPT -R -p $CASSANDRA_PIDFILE 2>&1 >> $CASSANDRA_CONSOLE_LOG 2>&1 &
        
        count=0
        launched=false
  
        until [ $count -gt $STARTUP_WAIT ]
		#'Node.*jump to NORMAL'
        do
                grep 'Waiting for gossip' $CASSANDRA_CONSOLE_LOG > /dev/null
                if [ $? -eq 0 ] ; then
                        launched=true
                        break
                fi
                sleep 1
                let count=$count+1;
        done
  
  	  	if $launched; then
			success
	        echo
	        return 0
		else
	        failure
	        echo
	        return 1
		fi
}


stop() {
        echo -n $"Stopping $prog: "
        count=0;

        if [ -f $CASSANDRA_PIDFILE ]; then
                read kpid < $CASSANDRA_PIDFILE
                let kwait=$SHUTDOWN_WAIT

                # Try issuing SIGTERM
                kill -15 $kpid
                until [ `ps --pid $kpid 2> /dev/null | grep -c $kpid 2> /dev/null` -eq '0' ] || [ $count -gt $kwait ]
                        do
                        sleep 1
                        let count=$count+1;
                done

                if [ $count -gt $kwait ]; then
                        kill -9 $kpid
                fi
        fi

        rm -f $CASSANDRA_PIDFILE
        rm -f $CASSANDRA_CONSOLE_LOG
        success
        echo
}

reload() {
        stop
        start
}

restart() {
        stop
        start
}

status() {
        if [ -f $CASSANDRA_PIDFILE ]; then
                read ppid < $CASSANDRA_PIDFILE
                if [ `ps --pid $ppid 2> /dev/null | grep -c $ppid 2> /dev/null` -eq '1' ]; then
                        echo "$prog is running (pid $ppid)"
                        return 0
                else
                      echo "$prog dead but pid file exists"
                        return 1
                fi
        fi
        echo "$prog is not running"
        return 3
}

case "$1" in
start)
        start
        ;;

stop)
        stop
        ;;

reload)
        reload
        ;;

restart)
        restart
        ;;

status)
        status
        ;;
*)

echo $"Usage: $0 {start|stop|reload|restart|status}"
exit 1
esac
  
exit $?
